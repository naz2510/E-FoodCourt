{
	// Place your miniProject workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
		"console.log": {
			"prefix": "clg",
			"body": [
				"console.log(\"$1\")",
			],
			"description": "useEffect function template"
		},
		"React Functional Component": {
			"prefix": "rfc",
			"body": [
			  "const ${TM_FILENAME_BASE} = () => {",
			  "  $1",
			  "}",
			  "",
			  "export default ${TM_FILENAME_BASE};"
			],
			"description": "Create a React functional component"
		},
		"React Functional Component with Props": {
			"prefix": "rfcp",
			"body": [
			  "type Props = {",
			  "  $1",
			  "}",
			  "",
			  "const ${TM_FILENAME_BASE} = ({$2}: Props) => {",
			  "  $3",
			  "}",
			  "",
			  "export default ${TM_FILENAME_BASE};"
			],
			"description": "Create a React functional component"
		},
		"useEffect Function": {
			"prefix": "ue",
			"body": [
				"useEffect(() => {",
				"\t$1",
				"}, [$2])"
			],
			"description": "useEffect function template"
		},
		"useState with Type": {
			"prefix": "us",
			"body": [
				"const [${1:stateName}, ${2:setStateName}] = useState<${3:Type}>($4);"
			],
			"description": "useState declaration with type in TypeScript"
		},
		"Handle Submit Function": {
			"prefix": "hs",
			"body": [
			  "const handleSubmit = (event: FormEvent) => {",
			  "\tevent.preventDefault();",
			  "\t$0",
			  "};"
			],
			"description": "Handle Submit function template for React"
		},
		"Async Function": {
			"prefix": "afunc",
			"body": [
				"const ${1:functionName} = async (${2:params}) => {",
				"\t$0",
				"};"
			],
			"description": "Async function template"
		},
		"Function": {
			"prefix": "func",
			"body": [
				"const ${1:functionName} = (${2:params}) => {",
				"\t$0",
				"};"
			],
			"description": "Async function template"
		}
	}
